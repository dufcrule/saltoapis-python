# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from saltoapis.nebula.digitalkey.v1 import digital_key_pb2 as salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2
from saltoapis.nebula.digitalkey.v1 import digital_key_pb2 as salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2


class DigitalKeyServiceStub(object):
    """DigitalKeyService is the service responsible for managing digital key
    resources. This service manages resources for the different types of keys
    that exist on mobile devices, such as app keys or wallet keys.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDigitalKey = channel.unary_unary(
                '/salto.nebula.digitalkey.v1.DigitalKeyService/GetDigitalKey',
                request_serializer=salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2.GetDigitalKeyRequest.SerializeToString,
                response_deserializer=salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2.DigitalKey.FromString,
                _registered_method=True)
        self.ListDigitalKeys = channel.unary_unary(
                '/salto.nebula.digitalkey.v1.DigitalKeyService/ListDigitalKeys',
                request_serializer=salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2.ListDigitalKeysRequest.SerializeToString,
                response_deserializer=salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2.ListDigitalKeysResponse.FromString,
                _registered_method=True)
        self.GetDigitalKeyAccessPoint = channel.unary_unary(
                '/salto.nebula.digitalkey.v1.DigitalKeyService/GetDigitalKeyAccessPoint',
                request_serializer=salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2.GetDigitalKeyAccessPointRequest.SerializeToString,
                response_deserializer=salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2.DigitalKeyAccessPoint.FromString,
                _registered_method=True)
        self.ListDigitalKeyAccessPoints = channel.unary_unary(
                '/salto.nebula.digitalkey.v1.DigitalKeyService/ListDigitalKeyAccessPoints',
                request_serializer=salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2.ListDigitalKeyAccessPointsRequest.SerializeToString,
                response_deserializer=salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2.ListDigitalKeyAccessPointsResponse.FromString,
                _registered_method=True)


class DigitalKeyServiceServicer(object):
    """DigitalKeyService is the service responsible for managing digital key
    resources. This service manages resources for the different types of keys
    that exist on mobile devices, such as app keys or wallet keys.
    """

    def GetDigitalKey(self, request, context):
        """Get a digital key

        Gets an existing digital key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDigitalKeys(self, request, context):
        """List digital keys

        Returns a list of digital keys that have been previously created.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDigitalKeyAccessPoint(self, request, context):
        """Get an access point

        Gets an existing digital key's access point association.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDigitalKeyAccessPoints(self, request, context):
        """List access points

        Lists an existing digital key's access point associations.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DigitalKeyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDigitalKey': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDigitalKey,
                    request_deserializer=salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2.GetDigitalKeyRequest.FromString,
                    response_serializer=salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2.DigitalKey.SerializeToString,
            ),
            'ListDigitalKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDigitalKeys,
                    request_deserializer=salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2.ListDigitalKeysRequest.FromString,
                    response_serializer=salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2.ListDigitalKeysResponse.SerializeToString,
            ),
            'GetDigitalKeyAccessPoint': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDigitalKeyAccessPoint,
                    request_deserializer=salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2.GetDigitalKeyAccessPointRequest.FromString,
                    response_serializer=salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2.DigitalKeyAccessPoint.SerializeToString,
            ),
            'ListDigitalKeyAccessPoints': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDigitalKeyAccessPoints,
                    request_deserializer=salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2.ListDigitalKeyAccessPointsRequest.FromString,
                    response_serializer=salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2.ListDigitalKeyAccessPointsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'salto.nebula.digitalkey.v1.DigitalKeyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DigitalKeyService(object):
    """DigitalKeyService is the service responsible for managing digital key
    resources. This service manages resources for the different types of keys
    that exist on mobile devices, such as app keys or wallet keys.
    """

    @staticmethod
    def GetDigitalKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/salto.nebula.digitalkey.v1.DigitalKeyService/GetDigitalKey',
            salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2.GetDigitalKeyRequest.SerializeToString,
            salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2.DigitalKey.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListDigitalKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/salto.nebula.digitalkey.v1.DigitalKeyService/ListDigitalKeys',
            salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2.ListDigitalKeysRequest.SerializeToString,
            salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2.ListDigitalKeysResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDigitalKeyAccessPoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/salto.nebula.digitalkey.v1.DigitalKeyService/GetDigitalKeyAccessPoint',
            salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2.GetDigitalKeyAccessPointRequest.SerializeToString,
            salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2.DigitalKeyAccessPoint.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListDigitalKeyAccessPoints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/salto.nebula.digitalkey.v1.DigitalKeyService/ListDigitalKeyAccessPoints',
            salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2.ListDigitalKeyAccessPointsRequest.SerializeToString,
            salto_dot_nebula_dot_digitalkey_dot_v1_dot_digital__key__pb2.ListDigitalKeyAccessPointsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
