# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from saltoapis.longrunning.v1 import operation_pb2 as salto_dot_longrunning_dot_v1_dot_operation__pb2
from saltoapis.longrunning.v1 import operation_pb2 as salto_dot_longrunning_dot_v1_dot_operation__pb2
from saltoapis.nebula.electroniclock.v1 import electronic_lock_pb2 as salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2
from saltoapis.nebula.electroniclock.v1 import electronic_lock_pb2 as salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2


class ElectronicLockServiceStub(object):
    """An electronic lock is a physical electronic device such as an electronic
    escutcheon or cylinder, or a door controller with an electric strike. It
    differs from an access point in that, an electronic lock could be a
    particular model of a device such as a SALTO Neo cylinder, a door controller
    with an electric strike or a Danalock V3 smartlock, for example. An
    electronic lock is a single device whereas an access point could be made up
    of several devices. An access point could be composed of an electronic lock
    plus a door detector, a door controller and a keypad, or an intercom adaptor
    which is connected to multiple electronic locks. This service is responsible
    for managing electronic lock resources.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateElectronicLock = channel.unary_unary(
                '/salto.nebula.electroniclock.v1.ElectronicLockService/CreateElectronicLock',
                request_serializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.CreateElectronicLockRequest.SerializeToString,
                response_deserializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.ElectronicLock.FromString,
                _registered_method=True)
        self.GetElectronicLock = channel.unary_unary(
                '/salto.nebula.electroniclock.v1.ElectronicLockService/GetElectronicLock',
                request_serializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.GetElectronicLockRequest.SerializeToString,
                response_deserializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.ElectronicLock.FromString,
                _registered_method=True)
        self.ListElectronicLocks = channel.unary_unary(
                '/salto.nebula.electroniclock.v1.ElectronicLockService/ListElectronicLocks',
                request_serializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.ListElectronicLocksRequest.SerializeToString,
                response_deserializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.ListElectronicLocksResponse.FromString,
                _registered_method=True)
        self.UpdateElectronicLock = channel.unary_unary(
                '/salto.nebula.electroniclock.v1.ElectronicLockService/UpdateElectronicLock',
                request_serializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.UpdateElectronicLockRequest.SerializeToString,
                response_deserializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.ElectronicLock.FromString,
                _registered_method=True)
        self.DeleteElectronicLock = channel.unary_unary(
                '/salto.nebula.electroniclock.v1.ElectronicLockService/DeleteElectronicLock',
                request_serializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.DeleteElectronicLockRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.BindElectronicLock = channel.unary_unary(
                '/salto.nebula.electroniclock.v1.ElectronicLockService/BindElectronicLock',
                request_serializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.BindElectronicLockRequest.SerializeToString,
                response_deserializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.BindElectronicLockResponse.FromString,
                _registered_method=True)
        self.UnbindElectronicLock = channel.unary_unary(
                '/salto.nebula.electroniclock.v1.ElectronicLockService/UnbindElectronicLock',
                request_serializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.UnbindElectronicLockRequest.SerializeToString,
                response_deserializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.UnbindElectronicLockResponse.FromString,
                _registered_method=True)
        self.InitializeElectronicLock = channel.unary_unary(
                '/salto.nebula.electroniclock.v1.ElectronicLockService/InitializeElectronicLock',
                request_serializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.InitializeElectronicLockRequest.SerializeToString,
                response_deserializer=salto_dot_longrunning_dot_v1_dot_operation__pb2.Operation.FromString,
                _registered_method=True)
        self.ConfigureElectronicLock = channel.unary_unary(
                '/salto.nebula.electroniclock.v1.ElectronicLockService/ConfigureElectronicLock',
                request_serializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.ConfigureElectronicLockRequest.SerializeToString,
                response_deserializer=salto_dot_longrunning_dot_v1_dot_operation__pb2.Operation.FromString,
                _registered_method=True)
        self.ResetElectronicLock = channel.unary_unary(
                '/salto.nebula.electroniclock.v1.ElectronicLockService/ResetElectronicLock',
                request_serializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.ResetElectronicLockRequest.SerializeToString,
                response_deserializer=salto_dot_longrunning_dot_v1_dot_operation__pb2.Operation.FromString,
                _registered_method=True)
        self.UpdateElectronicLockFirmware = channel.unary_unary(
                '/salto.nebula.electroniclock.v1.ElectronicLockService/UpdateElectronicLockFirmware',
                request_serializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.UpdateElectronicLockFirmwareRequest.SerializeToString,
                response_deserializer=salto_dot_longrunning_dot_v1_dot_operation__pb2.Operation.FromString,
                _registered_method=True)
        self.GenerateAuthorizationToken = channel.unary_unary(
                '/salto.nebula.electroniclock.v1.ElectronicLockService/GenerateAuthorizationToken',
                request_serializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.GenerateAuthorizationTokenRequest.SerializeToString,
                response_deserializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.GenerateAuthorizationTokenResponse.FromString,
                _registered_method=True)


class ElectronicLockServiceServicer(object):
    """An electronic lock is a physical electronic device such as an electronic
    escutcheon or cylinder, or a door controller with an electric strike. It
    differs from an access point in that, an electronic lock could be a
    particular model of a device such as a SALTO Neo cylinder, a door controller
    with an electric strike or a Danalock V3 smartlock, for example. An
    electronic lock is a single device whereas an access point could be made up
    of several devices. An access point could be composed of an electronic lock
    plus a door detector, a door controller and a keypad, or an intercom adaptor
    which is connected to multiple electronic locks. This service is responsible
    for managing electronic lock resources.
    """

    def CreateElectronicLock(self, request, context):
        """Create an electronic lock

        Creates a new electronic lock
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetElectronicLock(self, request, context):
        """Get an electronic lock

        Gets an existing electronic lock.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListElectronicLocks(self, request, context):
        """List electronic locks

        Returns a list of electronic locks that have been previously created.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateElectronicLock(self, request, context):
        """Update an electronic lock

        Updates an existing electronic lock.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteElectronicLock(self, request, context):
        """Delete an electronic lock

        Permanently deletes an electronic lock. This cannot be undone.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BindElectronicLock(self, request, context):
        """Bind an electronic lock

        Binds an electronic lock. Binding an electronic lock assigns a device
        identifier to the electronic lock. After binding, the device can then be
        initialized or configured.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnbindElectronicLock(self, request, context):
        """Unbind an electronic lock

        Unbinds an electronic lock. Unbinding an electronic lock removes the
        device identifier from the electronic lock. This may be required in some
        cases where the electronic lock is not available anymore because, for
        example, it's broken or damaged. Unbinding allows the initialization of
        the replacement device without removing it from the installation. It also
        means the device keeps all the information associated with it, such as
        events.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitializeElectronicLock(self, request, context):
        """Initialize an electronic lock

        Initializes an electronic lock. Electronic locks need to be initialized
        before you can start to use them.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureElectronicLock(self, request, context):
        """Configure an electronic lock

        Configures an electronic lock. Configuring an electronic lock implies
        adding some information to the electronic lock such as setting the time
        zone.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetElectronicLock(self, request, context):
        """Reset an electronic lock

        Resetting a device such as an electronic lock means returning it to its
        factory settings. Resetting is the process of removing the identity as
        well as all the associated information of an already configured device.
        Once a device has been reset, you need to reconfigure it.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateElectronicLockFirmware(self, request, context):
        """Update electronic lock firmware

        Updates an electronic lock's firmware. SALTO provides firmware updates
        when new functionality is available or when we fix a bug.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateAuthorizationToken(self, request, context):
        """Generate authorization token for an electronic lock

        Generates an authorization token that allows to connect to, authenticate and
        authorize an electronic lock.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ElectronicLockServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateElectronicLock': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateElectronicLock,
                    request_deserializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.CreateElectronicLockRequest.FromString,
                    response_serializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.ElectronicLock.SerializeToString,
            ),
            'GetElectronicLock': grpc.unary_unary_rpc_method_handler(
                    servicer.GetElectronicLock,
                    request_deserializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.GetElectronicLockRequest.FromString,
                    response_serializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.ElectronicLock.SerializeToString,
            ),
            'ListElectronicLocks': grpc.unary_unary_rpc_method_handler(
                    servicer.ListElectronicLocks,
                    request_deserializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.ListElectronicLocksRequest.FromString,
                    response_serializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.ListElectronicLocksResponse.SerializeToString,
            ),
            'UpdateElectronicLock': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateElectronicLock,
                    request_deserializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.UpdateElectronicLockRequest.FromString,
                    response_serializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.ElectronicLock.SerializeToString,
            ),
            'DeleteElectronicLock': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteElectronicLock,
                    request_deserializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.DeleteElectronicLockRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'BindElectronicLock': grpc.unary_unary_rpc_method_handler(
                    servicer.BindElectronicLock,
                    request_deserializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.BindElectronicLockRequest.FromString,
                    response_serializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.BindElectronicLockResponse.SerializeToString,
            ),
            'UnbindElectronicLock': grpc.unary_unary_rpc_method_handler(
                    servicer.UnbindElectronicLock,
                    request_deserializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.UnbindElectronicLockRequest.FromString,
                    response_serializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.UnbindElectronicLockResponse.SerializeToString,
            ),
            'InitializeElectronicLock': grpc.unary_unary_rpc_method_handler(
                    servicer.InitializeElectronicLock,
                    request_deserializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.InitializeElectronicLockRequest.FromString,
                    response_serializer=salto_dot_longrunning_dot_v1_dot_operation__pb2.Operation.SerializeToString,
            ),
            'ConfigureElectronicLock': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureElectronicLock,
                    request_deserializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.ConfigureElectronicLockRequest.FromString,
                    response_serializer=salto_dot_longrunning_dot_v1_dot_operation__pb2.Operation.SerializeToString,
            ),
            'ResetElectronicLock': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetElectronicLock,
                    request_deserializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.ResetElectronicLockRequest.FromString,
                    response_serializer=salto_dot_longrunning_dot_v1_dot_operation__pb2.Operation.SerializeToString,
            ),
            'UpdateElectronicLockFirmware': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateElectronicLockFirmware,
                    request_deserializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.UpdateElectronicLockFirmwareRequest.FromString,
                    response_serializer=salto_dot_longrunning_dot_v1_dot_operation__pb2.Operation.SerializeToString,
            ),
            'GenerateAuthorizationToken': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateAuthorizationToken,
                    request_deserializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.GenerateAuthorizationTokenRequest.FromString,
                    response_serializer=salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.GenerateAuthorizationTokenResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'salto.nebula.electroniclock.v1.ElectronicLockService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ElectronicLockService(object):
    """An electronic lock is a physical electronic device such as an electronic
    escutcheon or cylinder, or a door controller with an electric strike. It
    differs from an access point in that, an electronic lock could be a
    particular model of a device such as a SALTO Neo cylinder, a door controller
    with an electric strike or a Danalock V3 smartlock, for example. An
    electronic lock is a single device whereas an access point could be made up
    of several devices. An access point could be composed of an electronic lock
    plus a door detector, a door controller and a keypad, or an intercom adaptor
    which is connected to multiple electronic locks. This service is responsible
    for managing electronic lock resources.
    """

    @staticmethod
    def CreateElectronicLock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/salto.nebula.electroniclock.v1.ElectronicLockService/CreateElectronicLock',
            salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.CreateElectronicLockRequest.SerializeToString,
            salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.ElectronicLock.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetElectronicLock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/salto.nebula.electroniclock.v1.ElectronicLockService/GetElectronicLock',
            salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.GetElectronicLockRequest.SerializeToString,
            salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.ElectronicLock.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListElectronicLocks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/salto.nebula.electroniclock.v1.ElectronicLockService/ListElectronicLocks',
            salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.ListElectronicLocksRequest.SerializeToString,
            salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.ListElectronicLocksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateElectronicLock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/salto.nebula.electroniclock.v1.ElectronicLockService/UpdateElectronicLock',
            salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.UpdateElectronicLockRequest.SerializeToString,
            salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.ElectronicLock.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteElectronicLock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/salto.nebula.electroniclock.v1.ElectronicLockService/DeleteElectronicLock',
            salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.DeleteElectronicLockRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BindElectronicLock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/salto.nebula.electroniclock.v1.ElectronicLockService/BindElectronicLock',
            salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.BindElectronicLockRequest.SerializeToString,
            salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.BindElectronicLockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnbindElectronicLock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/salto.nebula.electroniclock.v1.ElectronicLockService/UnbindElectronicLock',
            salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.UnbindElectronicLockRequest.SerializeToString,
            salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.UnbindElectronicLockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InitializeElectronicLock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/salto.nebula.electroniclock.v1.ElectronicLockService/InitializeElectronicLock',
            salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.InitializeElectronicLockRequest.SerializeToString,
            salto_dot_longrunning_dot_v1_dot_operation__pb2.Operation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConfigureElectronicLock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/salto.nebula.electroniclock.v1.ElectronicLockService/ConfigureElectronicLock',
            salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.ConfigureElectronicLockRequest.SerializeToString,
            salto_dot_longrunning_dot_v1_dot_operation__pb2.Operation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResetElectronicLock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/salto.nebula.electroniclock.v1.ElectronicLockService/ResetElectronicLock',
            salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.ResetElectronicLockRequest.SerializeToString,
            salto_dot_longrunning_dot_v1_dot_operation__pb2.Operation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateElectronicLockFirmware(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/salto.nebula.electroniclock.v1.ElectronicLockService/UpdateElectronicLockFirmware',
            salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.UpdateElectronicLockFirmwareRequest.SerializeToString,
            salto_dot_longrunning_dot_v1_dot_operation__pb2.Operation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateAuthorizationToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/salto.nebula.electroniclock.v1.ElectronicLockService/GenerateAuthorizationToken',
            salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.GenerateAuthorizationTokenRequest.SerializeToString,
            salto_dot_nebula_dot_electroniclock_dot_v1_dot_electronic__lock__pb2.GenerateAuthorizationTokenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
